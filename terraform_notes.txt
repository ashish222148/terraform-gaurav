How to set path of terraform binary in linux environment:
    1-go to to the path where binary is downloaded
        export PATH=$PATH:$(pwd)
    2-move the terraform binary to the PATh location
        sudo cp terraform /usr/local/bin 

terraform also also able to read the fille which is written in json and extansion will be filename.tf.json

How to terraform reads the files:
    terraform read the files in alphabatical order.

***************************************************************************************************************************
output block:
output.tf
    output "ashish" {
    value = "hello world"
    }

***************************************************************************************************************************Chapter -1 Variable and functions**************************************************************************************************************************
Variable block:

variable.tf
        variable "username" {
            type=string
            default="world"
        }
        variable "age" {
            type=number
        }
output.tf
        output "variablevalue" {
        value = "Hello ${var.username} and age is ${"var.age}"
        }

Passing variable through command line:
    terraform plan -var "your-name"="ashish"
    or
    terraform plan -var "your-name=ashish"
    or
    terraform plan -var "username=arun" -var "age=40"


2-list variable:
    output "variablevalue" {
        value = "Hello ${var.username[0]} "
}

variable "username" {
    type=list
    //default=["world"]
}


terraform plan -var 'username= ["ashish","arun"]'


3-variables with the use of functions:

Join function: function is used with ${}
    output "variablevalue" {
        value = "names are ${join("-->",var.username)} "
        }
    output "varname" {
        value = "names are ${upper(var.username[0])}"
        }

    variable "username" {
        type=list
        }

terraform plan -var 'username= ["ashish","arun"]

4-map variable with lookup function

    output "usersage" {
    value = "age of ashish is ${lookup(var.usersage,"ashish")}"
    }

    variable "usersage" {
    type=map
    default = {
        "ashish"=40
        "avanish"=38
    }
    }
  

  How to use map variable dynamically:
    variable "usersage" {
        type=map
        default = {
            "ashish"=40
            "avanish"=38
        }
        }

        variable "uname" {
        type = string
        }
output "usersage" {
  value = "age of ${var.uname} is ${lookup(var.usersage,"${var.uname}")}"
}
terraform plan -var 'usersage={"ashish":40,"amit":38}' -var 'uname'='ashish'



5-tfvars file in terraform:
A- Priority-3
    terraform.tfvars
        create file with the name of terraform.tfvars. it will automatically pick the variable value
        output.tf
            output "userdetails" {
                value = "username is ${var.username} and his age is ${var.age}"
                }
        variable.tf
            variable "username" {
            type = string
            }

            variable "age" {
            type = number
            }
        terraform.tfvars
            username = "ashish"
            age = 40

B- Priority-1
custom tfvars file:
    dev.tfvars ppte.tfvars or prod.tfvars
        output.tf
            output "userdetails" {
                value = "username is ${var.username} and his age is ${var.age}"
                }
        variable.tf
            variable "username" {
            type = string
            }

            variable "age" {
            type = number
            }
        terraform.tfvars
            username = "ashish"
            age = 40
        development.tfvars
             username = "arun"
             age = 41      

        terraform plan -var-file=development.tfvars   

C- Priority-2
ashish.auto.tfvars


6-Read Environment Variable in Terraform configuration:
    If you want to pass the value through environment variable:

        output "userdetails" {
        value = "username is ${var.username} and his age is ${var.age}"
        }
        variable "username" {
        type = string
        }

        variable "age" {
        type = number
        }

    export TF_VAR_username="ashish"
    export TF_VAR_age=38
    terraform plan

***************************************************************************************************************************Chapter -2 terraform basic commands **************************************************************************************************************************
terraform providers: this command tell you what are the providers you are using in the current directory.
    Note:
        Terraform block is not mandatory, but same is recommanded.
        When it is recommended / required: 
            1-You want to pin provider versions
            2-You want to specify Terraform version constraints:
            3-You are using multiple providers
            4-Youâ€™re working in a team

 *   terraform.tfstate vs terraform.tfstate.backup:
        terraform.tfstate is current state file. while terraform.tfstate.backup is the previous state file. if terraform.tfstate is deleted, we can recover from last state , (from terraform.tfstate.backup) just change it as terraform.tfstate

    How to destroy resource id from state file and provider: but if you will not omit from configuration file at the time of applyit will also run and recreate the instance.
        terraform destroy -target firstrepo-terraform

terraform refresh:
Note:
    terraform state list
    terraform state show github_repository.firstrepo-terraform  -->> only this resource state will be visible
    terraform show: all resource state will be shown.

terraform apply -refresh-only
    terraform resfresh(deprecated) command refresh the manually changed in instance in statefile. if you want to make the same change in configuration  file, you have to manually do the same.

output block: if you want to pull any resource attribute in output block, go to provider -> resource and goto argument attribute section, we can only provide the mentioned attribute which was on provider.
    for example: https://registry.terraform.io/providers/integrations/github/latest/docs/resources/repository#full_name-1
    Note: output block fetch the details from the state file. if state file is not available at the time of running plan, it will not pull the details.
        even we can fetch the details such as terraform output variable_identifiername. it will fetch from state file.
***************************************************************************************************************************Chapter -3 terraform plan ************************************************************************************************************************** 
ðŸ”¹ What happens when you run terraform plan
            1-Load configuration
                Terraform reads your .tf files (providers, variables, resources, modules).
                Validates syntax and schema.

            2-Initialize providers
                Ensures required providers (AWS, GitHub, Azure, etc.) are installed and loaded.

            3-Load current state
                Terraform reads the state file (terraform.tfstate) to know what resources it thinks already exist.

            4-(Optional) Refresh state
                By default, Terraform queries the real infrastructure (via provider APIs).
                Updates the in-memory state (not writing to file yet).
                This helps detect drift (manual changes outside Terraform).
                Can be skipped with -refresh=false.

            5-Compare desired vs. actual
                Compares:
                    Desired state (your .tf config)
                    Current state (from .tfstate + provider refresh)
                Figures out what changes are needed to make infra match config.

            6-Generate execution plan
                Lists actions: create, update in-place, delete, or no-op.
                Shows a diff of what will change.

            7-Output plan
                Terraform prints the plan to your terminal.
                Optionally, you can save it with terraform plan -out=planfile.
                This saved plan can later be applied using terraform apply planfile.

